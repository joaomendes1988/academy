# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Docker Build/Push

run-name: Docker Build and Push to ${{ inputs.environment }}

on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - test
          - int
          - e2e
          - prod
      tag:
        description: 'Tag to deploy'
        required: true
        type: string
        default: 'latest'
        
  
env:
  IMAGE_NAME_ENV: academy-${{ inputs.environment }}
  TAG_NAME_ENV: ${{ inputs.tag }}-${{ inputs.environment }}
  ARTIFACT_NAME: docker-image

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: academy
          POSTGRES_PASSWORD: academy
          POSTGRES_DB: postgres
        ports:
          - 5432:5432


    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Call Docker Action
      uses: joaomendes1988/academy/.github/actions/maven_build@main

    - name: Call Docker Action
      uses: joaomendes1988/academy/.github/actions/docker_build@main
      with:
        path_dockerfile: Dockerfile
        image_name: $IMAGE_NAME_ENV
        tag_name: $TAG_NAME_ENV
    
    - name: Save Docker image
      run: |
        docker save -o $IMAGE_NAME_ENV.tar $IMAGE_NAME_ENV:$TAG_NAME_ENV


    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v4
      with:
        name: $ARTIFACT_NAME
        path: "${{ env.IMAGE_NAME_ENV }}.tar"

  list:
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ inputs.environment }}
    steps:

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: $ARTIFACT_NAME

    - name: Load Docker image
      run: docker load -i $IMAGE_NAME_ENV.tar

    - name: List docker images
      run: |
        docker image ls
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker Push
      uses: joaomendes1988/academy/.github/actions/docker_push@main
      with:
        docker_username: ${{ secrets.DOCKERHUB_USERNAME }}
        image: $IMAGE_NAME_ENV:$TAG_NAME_ENV
   